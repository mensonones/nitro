///
/// NitroImageOnLoad.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "NitroImageOnLoad.hpp"

#include <jni.h>
#include <fbjni/fbjni.h>
#include <NitroModules/HybridObjectRegistry.hpp>

#include "JHybridImageSpec.hpp"
#include "JFunc_void_std__string.hpp"
#include "JHybridImageFactorySpec.hpp"
#include "JHybridTestObjectSwiftKotlinSpec.hpp"
#include "JFunc_void_std__vector_Powertrain_.hpp"
#include "JFunc_void.hpp"
#include "JFunc_void_std__optional_double_.hpp"
#include "JHybridBaseSpec.hpp"
#include "JHybridChildSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include "HybridTestObjectCpp.hpp"

namespace margelo::nitro::image {

int initialize(JavaVM* vm) {
  using namespace margelo::nitro;
  using namespace margelo::nitro::image;
  using namespace facebook;

  return facebook::jni::initialize(vm, [] {
    // Register native JNI methods
    margelo::nitro::image::JHybridImageSpec::registerNatives();
    margelo::nitro::image::JFunc_void_std__string::registerNatives();
    margelo::nitro::image::JHybridImageFactorySpec::registerNatives();
    margelo::nitro::image::JHybridTestObjectSwiftKotlinSpec::registerNatives();
    margelo::nitro::image::JFunc_void_std__vector_Powertrain_::registerNatives();
    margelo::nitro::image::JFunc_void::registerNatives();
    margelo::nitro::image::JFunc_void::registerNatives();
    margelo::nitro::image::JFunc_void::registerNatives();
    margelo::nitro::image::JFunc_void::registerNatives();
    margelo::nitro::image::JFunc_void_std__optional_double_::registerNatives();
    margelo::nitro::image::JHybridBaseSpec::registerNatives();
    margelo::nitro::image::JHybridChildSpec::registerNatives();

    // Register Nitro Hybrid Objects
    HybridObjectRegistry::registerHybridObjectConstructor(
      "ImageFactory",
      []() -> std::shared_ptr<HybridObject> {
        static jni::alias_ref<jni::JClass> javaClass;
        static jni::JConstructor<JHybridImageFactorySpec::javaobject()> defaultConstructor;
        static bool isInitialized = false;
        try {
          if (!isInitialized) {
            javaClass = jni::findClassStatic("com/margelo/nitro/image/ImageFactory");
            defaultConstructor = javaClass->getConstructor<JHybridImageFactorySpec::javaobject()>();
            isInitialized = true;
          }
        } catch (const jni::JniException& exc) {
          std::string message = exc.what();
          if (message.find("ClassNotFoundException")) {
            throw std::runtime_error("Couldn't find class `com.margelo.nitro.image.ImageFactory`!\n"
                                     "- Make sure the class exists in the specified namespace.\n"
                                     "- Make sure the class is not stripped. If you are using ProGuard, add `@Keep` and `@DoNotStrip` annotations to ImageFactory.");
          } else if (message.find("NoSuchMethodError")) {
            throw std::runtime_error("Couldn't find ImageFactory's default constructor!\n"
                                     "- If you don't have one, make sure to add a constructor that takes zero arguments (= default constructor).\n"
                                     "- If you need arguments to create instances of ImageFactory, create a separate HybridObject that acts as a factory for this HybridObject to create instances of it with parameters.\n"
                                     "- If you already have a default constructor, make sure it is not being stripped. If you are using ProGuard, add `@Keep` and `@DoNotStrip` annotations to the default constructor.");
          } else {
            throw;
          }
        }
    
        auto instance = javaClass->newObject(defaultConstructor);
    #ifdef NITRO_DEBUG
        if (instance == nullptr) [[unlikely]] {
          throw std::runtime_error("Failed to create an instance of \"JHybridImageFactorySpec\" - the constructor returned null!");
        }
    #endif
        auto globalRef = jni::make_global(instance);
        return JNISharedPtr::make_shared_from_jni<JHybridImageFactorySpec>(globalRef);
      }
    );
    HybridObjectRegistry::registerHybridObjectConstructor(
      "TestObjectCpp",
      []() -> std::shared_ptr<HybridObject> {
        static_assert(std::is_default_constructible_v<HybridTestObjectCpp>,
                      "The HybridObject \"HybridTestObjectCpp\" is not default-constructible! "
                      "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
        return std::make_shared<HybridTestObjectCpp>();
      }
    );
    HybridObjectRegistry::registerHybridObjectConstructor(
      "TestObjectSwiftKotlin",
      []() -> std::shared_ptr<HybridObject> {
        static jni::alias_ref<jni::JClass> javaClass;
        static jni::JConstructor<JHybridTestObjectSwiftKotlinSpec::javaobject()> defaultConstructor;
        static bool isInitialized = false;
        try {
          if (!isInitialized) {
            javaClass = jni::findClassStatic("com/margelo/nitro/image/HybridTestObjectKotlin");
            defaultConstructor = javaClass->getConstructor<JHybridTestObjectSwiftKotlinSpec::javaobject()>();
            isInitialized = true;
          }
        } catch (const jni::JniException& exc) {
          std::string message = exc.what();
          if (message.find("ClassNotFoundException")) {
            throw std::runtime_error("Couldn't find class `com.margelo.nitro.image.HybridTestObjectKotlin`!\n"
                                     "- Make sure the class exists in the specified namespace.\n"
                                     "- Make sure the class is not stripped. If you are using ProGuard, add `@Keep` and `@DoNotStrip` annotations to HybridTestObjectKotlin.");
          } else if (message.find("NoSuchMethodError")) {
            throw std::runtime_error("Couldn't find HybridTestObjectKotlin's default constructor!\n"
                                     "- If you don't have one, make sure to add a constructor that takes zero arguments (= default constructor).\n"
                                     "- If you need arguments to create instances of HybridTestObjectKotlin, create a separate HybridObject that acts as a factory for this HybridObject to create instances of it with parameters.\n"
                                     "- If you already have a default constructor, make sure it is not being stripped. If you are using ProGuard, add `@Keep` and `@DoNotStrip` annotations to the default constructor.");
          } else {
            throw;
          }
        }
    
        auto instance = javaClass->newObject(defaultConstructor);
    #ifdef NITRO_DEBUG
        if (instance == nullptr) [[unlikely]] {
          throw std::runtime_error("Failed to create an instance of \"JHybridTestObjectSwiftKotlinSpec\" - the constructor returned null!");
        }
    #endif
        auto globalRef = jni::make_global(instance);
        return JNISharedPtr::make_shared_from_jni<JHybridTestObjectSwiftKotlinSpec>(globalRef);
      }
    );
    HybridObjectRegistry::registerHybridObjectConstructor(
      "Base",
      []() -> std::shared_ptr<HybridObject> {
        static jni::alias_ref<jni::JClass> javaClass;
        static jni::JConstructor<JHybridBaseSpec::javaobject()> defaultConstructor;
        static bool isInitialized = false;
        try {
          if (!isInitialized) {
            javaClass = jni::findClassStatic("com/margelo/nitro/image/HybridBase");
            defaultConstructor = javaClass->getConstructor<JHybridBaseSpec::javaobject()>();
            isInitialized = true;
          }
        } catch (const jni::JniException& exc) {
          std::string message = exc.what();
          if (message.find("ClassNotFoundException")) {
            throw std::runtime_error("Couldn't find class `com.margelo.nitro.image.HybridBase`!\n"
                                     "- Make sure the class exists in the specified namespace.\n"
                                     "- Make sure the class is not stripped. If you are using ProGuard, add `@Keep` and `@DoNotStrip` annotations to HybridBase.");
          } else if (message.find("NoSuchMethodError")) {
            throw std::runtime_error("Couldn't find HybridBase's default constructor!\n"
                                     "- If you don't have one, make sure to add a constructor that takes zero arguments (= default constructor).\n"
                                     "- If you need arguments to create instances of HybridBase, create a separate HybridObject that acts as a factory for this HybridObject to create instances of it with parameters.\n"
                                     "- If you already have a default constructor, make sure it is not being stripped. If you are using ProGuard, add `@Keep` and `@DoNotStrip` annotations to the default constructor.");
          } else {
            throw;
          }
        }
    
        auto instance = javaClass->newObject(defaultConstructor);
    #ifdef NITRO_DEBUG
        if (instance == nullptr) [[unlikely]] {
          throw std::runtime_error("Failed to create an instance of \"JHybridBaseSpec\" - the constructor returned null!");
        }
    #endif
        auto globalRef = jni::make_global(instance);
        return JNISharedPtr::make_shared_from_jni<JHybridBaseSpec>(globalRef);
      }
    );
    HybridObjectRegistry::registerHybridObjectConstructor(
      "Child",
      []() -> std::shared_ptr<HybridObject> {
        static jni::alias_ref<jni::JClass> javaClass;
        static jni::JConstructor<JHybridChildSpec::javaobject()> defaultConstructor;
        static bool isInitialized = false;
        try {
          if (!isInitialized) {
            javaClass = jni::findClassStatic("com/margelo/nitro/image/HybridChild");
            defaultConstructor = javaClass->getConstructor<JHybridChildSpec::javaobject()>();
            isInitialized = true;
          }
        } catch (const jni::JniException& exc) {
          std::string message = exc.what();
          if (message.find("ClassNotFoundException")) {
            throw std::runtime_error("Couldn't find class `com.margelo.nitro.image.HybridChild`!\n"
                                     "- Make sure the class exists in the specified namespace.\n"
                                     "- Make sure the class is not stripped. If you are using ProGuard, add `@Keep` and `@DoNotStrip` annotations to HybridChild.");
          } else if (message.find("NoSuchMethodError")) {
            throw std::runtime_error("Couldn't find HybridChild's default constructor!\n"
                                     "- If you don't have one, make sure to add a constructor that takes zero arguments (= default constructor).\n"
                                     "- If you need arguments to create instances of HybridChild, create a separate HybridObject that acts as a factory for this HybridObject to create instances of it with parameters.\n"
                                     "- If you already have a default constructor, make sure it is not being stripped. If you are using ProGuard, add `@Keep` and `@DoNotStrip` annotations to the default constructor.");
          } else {
            throw;
          }
        }
    
        auto instance = javaClass->newObject(defaultConstructor);
    #ifdef NITRO_DEBUG
        if (instance == nullptr) [[unlikely]] {
          throw std::runtime_error("Failed to create an instance of \"JHybridChildSpec\" - the constructor returned null!");
        }
    #endif
        auto globalRef = jni::make_global(instance);
        return JNISharedPtr::make_shared_from_jni<JHybridChildSpec>(globalRef);
      }
    );
  });
}

} // namespace margelo::nitro::image

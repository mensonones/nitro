///
/// JCallback_void_std__vector_Powertrain_.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <NitroModules/Callback.hpp>
#include <vector>
#include "Powertrain.hpp"
#include "JPowertrain.hpp"

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * C++ representation of the callback Callback_void_std__vector_Powertrain_.
   * This is a Kotlin `(array: Array<Powertrain>) -> Unit`, backed by a `std::function<...>`.
   */
  struct JCallback_void_std__vector_Powertrain_ final: public jni::HybridClass<JCallback_void_std__vector_Powertrain_> {
  public:
    static jni::local_ref<JCallback_void_std__vector_Powertrain_::javaobject> fromCpp(const std::shared_ptr<Callback<void(const std::vector<Powertrain>& /* array */)>>& func) {
      return JCallback_void_std__vector_Powertrain_::newObjectCxxArgs(func);
    }

  public:
    void call(jni::alias_ref<jni::JArrayClass<JPowertrain>> array) {
      return _func([&]() {
        size_t __size = array->size();
        std::vector<Powertrain> __vector;
        __vector.reserve(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          auto __element = array->getElement(__i);
          __vector.push_back(__element->toCpp());
        }
        return __vector;
      }());
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Callback_void_std__vector_Powertrain_;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JCallback_void_std__vector_Powertrain_::call)});
    }

  private:
    explicit JCallback_void_std__vector_Powertrain_(const std::shared_ptr<Callback<void(const std::vector<Powertrain>& /* array */)>>& func): _func(func) { }

  private:
    friend HybridBase;
    std::shared_ptr<Callback<void(const std::vector<Powertrain>& /* array */)>> _func;
  };

} // namespace margelo::nitro::image

///
/// JCallback_void_std__string.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <NitroModules/Callback.hpp>
#include <string>

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * C++ representation of the callback Callback_void_std__string.
   * This is a Kotlin `(path: String) -> Unit`, backed by a `std::function<...>`.
   */
  struct JCallback_void_std__string final: public jni::HybridClass<JCallback_void_std__string> {
  public:
    static jni::local_ref<JCallback_void_std__string::javaobject> fromCpp(const std::shared_ptr<Callback<void(const std::string& /* path */)>>& func) {
      return JCallback_void_std__string::newObjectCxxArgs(func);
    }

  public:
    void call(jni::alias_ref<jni::JString> path) {
      return _func(path->toStdString());
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Callback_void_std__string;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JCallback_void_std__string::call)});
    }

  private:
    explicit JCallback_void_std__string(const std::shared_ptr<Callback<void(const std::string& /* path */)>>& func): _func(func) { }

  private:
    friend HybridBase;
    std::shared_ptr<Callback<void(const std::string& /* path */)>> _func;
  };

} // namespace margelo::nitro::image

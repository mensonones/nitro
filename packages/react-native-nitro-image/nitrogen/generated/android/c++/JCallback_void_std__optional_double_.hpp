///
/// JCallback_void_std__optional_double_.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <NitroModules/Callback.hpp>
#include <optional>

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * C++ representation of the callback Callback_void_std__optional_double_.
   * This is a Kotlin `(maybe: Double?) -> Unit`, backed by a `std::function<...>`.
   */
  struct JCallback_void_std__optional_double_ final: public jni::HybridClass<JCallback_void_std__optional_double_> {
  public:
    static jni::local_ref<JCallback_void_std__optional_double_::javaobject> fromCpp(const Callback<void(std::optional<double> /* maybe */)>& func) {
      return JCallback_void_std__optional_double_::newObjectCxxArgs(func);
    }

  public:
    void call(jni::alias_ref<jni::JDouble> maybe) {
      return _func(maybe != nullptr ? std::make_optional(maybe->value()) : std::nullopt);
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/Callback_void_std__optional_double_;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JCallback_void_std__optional_double_::call)});
    }

  private:
    explicit JCallback_void_std__optional_double_(const Callback<void(std::optional<double> /* maybe */)>& func): _func(func) { }

  private:
    friend HybridBase;
    Callback<void(std::optional<double> /* maybe */)> _func;
  };

} // namespace margelo::nitro::image

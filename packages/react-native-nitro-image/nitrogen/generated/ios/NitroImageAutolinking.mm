///
/// NitroImageAutolinking.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#import <Foundation/Foundation.h>
#import <NitroModules/HybridObjectRegistry.hpp>
#import "NitroImage-Swift-Cxx-Umbrella.hpp"
#import <type_traits>

#include "HybridImageFactorySpecSwift.hpp"
#include "HybridTestObjectCpp.hpp"
#include "HybridTestObjectSwiftKotlinSpecSwift.hpp"
#include "HybridBaseSpecSwift.hpp"
#include "HybridChildSpecSwift.hpp"

@interface NitroImageAutolinking : NSObject
@end

@implementation NitroImageAutolinking

+ (void) load {
  using namespace margelo::nitro;
  using namespace margelo::nitro::image;

  HybridObjectRegistry::registerHybridObjectConstructor(
    "ImageFactory",
    []() -> std::shared_ptr<HybridObject> {
      return NitroImage::NitroImageAutolinking::createImageFactory();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "TestObjectCpp",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridTestObjectCpp>,
                    "The HybridObject \"HybridTestObjectCpp\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridTestObjectCpp>();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "TestObjectSwiftKotlin",
    []() -> std::shared_ptr<HybridObject> {
      return NitroImage::NitroImageAutolinking::createTestObjectSwiftKotlin();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "Base",
    []() -> std::shared_ptr<HybridObject> {
      return NitroImage::NitroImageAutolinking::createBase();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "Child",
    []() -> std::shared_ptr<HybridObject> {
      return NitroImage::NitroImageAutolinking::createChild();
    }
  );
}

@end
